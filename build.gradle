import groovy.text.SimpleTemplateEngine
import org.kohsuke.github.*

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.kohsuke:github-api:1.94'
    }
}

plugins {
    id 'java-gradle-plugin'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id 'groovy'
    id "com.gradle.plugin-publish" version "0.10.0"
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.20.0"
    id 'com.github.jk1.dependency-license-report' version '1.3'
    id "com.github.hierynomus.license" version "0.15.0"
    id "org.asciidoctor.convert" version "2.0-alpha.5"
    id "org.ajoberstar.git-publish" version "2.0.0"
}

project.version.with {
    major = badassJlinkPluginVersionMajor as int
    minor= badassJlinkPluginVersionMinor as int
    patch = badassJlinkPluginVersionPatch as int
    if (project.hasProperty('badassJlinkPluginVersionLabel')) {
        preRelease = badassJlinkPluginVersionLabel
    }
    releaseBuild = Boolean.valueOf(badassJlinkPluginReleaseBuild)
}
ext.badassJlinkPluginVersion = project.version as String
ext.badassJlinkPluginTag = Boolean.valueOf(badassJlinkPluginReleaseBuild) ? "v$ext.badassJlinkPluginVersion" : 'master'

group = 'org.beryx'
version = badassJlinkPluginVersion

ext.asmVersion = '7.0'

repositories {
    jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

[compileGroovy, compileTestGroovy]*.options*.encoding = defaultEncoding
[compileGroovy, compileTestGroovy]*.groovyOptions*.encoding = defaultEncoding

task licenseCheckGroovy(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
    source = fileTree(dir: "src").include("**/*.groovy")
}
tasks.license.dependsOn licenseCheckGroovy

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
    excludes (['**/*.properties', '**/*.txt', '**/hello*/'])
}

configurations {
    compile {transitive = true}
}

configurations {
    plugin.description = 'Plugin\'s dependencies'
    compile.extendsFrom plugin
}

dependencies {
    implementation gradleTestKit()
    implementation localGroovy()

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    plugin "org.ow2.asm:asm:$asmVersion"
    plugin "org.ow2.asm:asm-commons:$asmVersion"
    plugin "org.ow2.asm:asm-tree:$asmVersion"
    plugin "org.ow2.asm:asm-util:$asmVersion"
    plugin "org.ow2.asm:asm-analysis:$asmVersion"

    testImplementation('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testImplementation 'cglib:cglib-nodep:3.2.9'
    testImplementation 'org.objenesis:objenesis:3.0.1'
    testImplementation ('com.athaydes:spock-reports:1.6.1') { transitive = false}

    asciidoctor 'com.bmuschko:asciidoctorj-tabbed-code-extension:0.1'
}

shadowJar {
    configurations = [project.configurations.plugin]
    classifier = null
    dependencies {
        include(dependency("org.ow2.asm:asm:$asmVersion"))
        include(dependency("org.ow2.asm:asm-commons:$asmVersion"))
        include(dependency("org.ow2.asm:asm-tree:$asmVersion"))
        include(dependency("org.ow2.asm:asm-util:$asmVersion"))
        include(dependency("org.ow2.asm:asm-anaysis:$asmVersion"))
    }
    relocate 'org.objectweb.asm', 'org.beryx.jlink.shadow.asm'
}

jar.enabled = false
jar.dependsOn shadowJar

gradlePlugin {
    plugins {
        jlink {
            id = 'org.beryx.jlink'
            implementationClass = 'org.beryx.jlink.JlinkPlugin'
        }
    }
}
pluginBundle {
    website = 'https://github.com/beryx/badass-jlink-plugin/'
    vcsUrl = 'https://github.com/beryx/badass-jlink-plugin'
    description = 'A Gradle plugin that assembles your modules into a custom runtime image'
    tags = ['jlink', 'jpms', 'image']

    plugins {
        jlink {
            id = 'org.beryx.jlink'
            displayName = 'Badass JLink Plugin'
        }
    }
}


jar {
    manifest {
        attributes 'Implementation-Title': "${project.archivesBaseName}",
                'Implementation-Version': badassJlinkPluginVersion
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

asciidoctor {
    sourceDir = file("doc")
    sources {include 'index.adoc'}
    logDocuments = true
    attributes 'source-highlighter': 'coderay',
            'coderay-linenums-mode': 'table',
            'project-version': version,
            icons: 'font',
            imagesdir: 'img',
            'data-uri': '',
            linkattrs: true,
            linkcss: true,
            'git-tag': badassJlinkPluginTag,
            'blob-root': "https://github.com/beryx/badass-jlink-plugin/blob/$badassJlinkPluginTag"
}

gitPublish {
    repoUri = 'https://github.com/beryx/badass-jlink-plugin.git'
    branch = 'gh-pages'

    contents {
        def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
        if(pgType == 'init') {
            from file("ghpages")
        } else if(pgType == 'list') {
            from file("build/release-list")
        } else {
            from file("${asciidoctor.outputDir.path}/html5")
            from file("build/docs")
        }
        def docDir = Boolean.valueOf(badassJlinkPluginReleaseBuild) ? 'releases' : 'snapshots'
        if(pgType == 'init') {
            into "."
        } else if(pgType == 'list') {
            into "."
            preserve {
                include '**'
                exclude "releases.md"
            }
        } else if(pgType == 'version') {
            gitPublishPush.enabled = (docDir != 'snapshots')
            into "$docDir/$badassJlinkPluginVersion"

            preserve {
                include '**'
                exclude "$docDir/$badassJlinkPluginVersion"
            }
        } else {
            into "$docDir/latest"

            preserve {
                include '**'
                exclude "$docDir/latest"
            }
        }
    }
}

task "update-release-list" {
    doLast {
        def docBaseUrl = 'http://badass-jlink-plugin.beryx.org'
        updateReleaseList(docBaseUrl)
    }
}

def updateReleaseList(String docBaseUrl) {
    List<String> releases = getReleases()
    def markdown = getReleasesMarkdown(releases, docBaseUrl)
    def releaseListDir = new File('build/release-list')
    releaseListDir.mkdirs()
    new File(releaseListDir, 'releases.md').write(markdown)
}

def getReleases() {
    GitHub gitHubApi = GitHub.connectUsingPassword(System.getenv('GRGIT_USER') ?: '', '')
    def releases = gitHubApi.getOrganization("beryx")
            .getRepository("badass-jlink-plugin")
            .getDirectoryContent("releases", "gh-pages")*.name
    releases.removeAll { !it || it == 'latest' }
    releases.reverse()
}

def getReleasesMarkdown(List<String> releases, String docBaseUrl) {
    def releasesTemplate = '''
            ## List of all releases ##
            
            **Latest snapshot**
            - [documentation]($docBaseUrl/snapshots/latest)
            - [groovydoc]($docBaseUrl/snapshots/latest/groovydoc)
            
            <% releases.each { %>**Release $it**
              - [documentation]($docBaseUrl/releases/$it)
              - [groovydoc]($docBaseUrl/releases/$it/groovydoc)
              
            <% } %>
        '''.stripIndent()

    def engine = new SimpleTemplateEngine()
    def template = engine.createTemplate(releasesTemplate)
    def binding = [
            docBaseUrl: docBaseUrl,
            releases  : releases
    ]

    template.make(binding).toString()
}
